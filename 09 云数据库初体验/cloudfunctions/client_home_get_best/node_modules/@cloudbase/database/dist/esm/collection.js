var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { DocumentReference } from './document';
import { Query } from './query';
import Aggregation from './aggregate';
import { serialize } from './serializer/datatype';
import { getReqOpts, stringifyByEJSON, preProcess } from './utils/utils';
import { Validate } from './validate';
import { isArray } from './utils/type';
export class CollectionReference extends Query {
    constructor(db, coll, apiOptions, transactionId) {
        super(db, coll, '', apiOptions, db._oldDbInstance.collection(coll));
        if (transactionId) {
            this._transactionId = transactionId;
        }
    }
    get name() {
        return this._coll;
    }
    doc(docID) {
        if (typeof docID !== 'string' && typeof docID !== 'number') {
            throw new Error('docId必须为字符串或数字');
        }
        return new DocumentReference(this._db, this._coll, this._apiOptions, docID, this._transactionId, this._db._oldDbInstance.collection(this._coll).doc(docID));
    }
    async add(data) {
        let transformData = data;
        if (!isArray(data)) {
            transformData = [data];
        }
        transformData = transformData.map(item => {
            return stringifyByEJSON(serialize(item));
        });
        let params = {
            collectionName: this._coll,
            data: transformData
        };
        const res = await this._request.send('database.insertDocument', params, getReqOpts(this._apiOptions));
        if (res.code) {
            return res;
        }
        if (!isArray(data)) {
            if (this._transactionId) {
                return {
                    inserted: 1,
                    ok: 1,
                    id: res.data.insertedIds[0],
                    requestId: res.requestId
                };
            }
            return {
                id: res.data.insertedIds[0],
                requestId: res.requestId
            };
        }
        return {
            ids: res.data.insertedIds,
            requestId: res.requestId
        };
    }
    aggregate() {
        return new Aggregation(this._db, this._coll);
    }
    options(apiOptions) {
        Validate.isValidOptions(apiOptions);
        return new CollectionReference(this._db, this._coll, apiOptions, this._transactionId);
    }
}
__decorate([
    preProcess(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], CollectionReference.prototype, "add", null);
